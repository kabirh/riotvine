Hi Kabir,

On Thu, Aug 20, 2009 at 9:55 AM, Kabir<kabir@illiusrock.com> wrote:
> Hey Rajesh,

> Thanks for going through an adding estimates.

> Recommended events are a great feature and I think they'll be something
> users will love, so let's discuss them a bit further and figure out the best
> way to make them work.

> Part of the issue is calculating that list of followers, so I'm hoping that
> once we implement a "friending" function, that will lessen. 

Here's what has already been implemented:

There's a backend process that "sweeps" Twitter at a frequency we can determine (say every 6 hours) for each of our Twitter-enabled users. Fetches their list of followers and followees, extracts friends from that list and creates that user's friendship set in our database based on how many of those friends have RV accounts.

In short, we have the Twitter-based friending function already in place.

> I would rather
> run a script over night that looks at your followers and recommends friends
> to add based on your followers. 

I take it you meant recommends "events" to add based on your friends? If yes, that process is already built as I mentioned above.

> This way, we can break the process into two steps, the friending piece and
> then a recommendation function that can run everytime someone adds an event
> to their calendar. As soon as the event is added, we can push that event out
> to their list of friends recommended events list. If an event shows up twice
> in a user's list, we increment the number of friends attending. Let me know
> if this process fails somewhere or if it makes things more complicated than
> what you had in mind. 

It has one minor flaw:

- It doesn't take into account friendship changes that happen *after* an event has been added by a user to his calendar. In practice, this may not manifest itself all that much.

And it needs one small adjustment: if a user removes an event from his calendar, we will have to go through the same process and decrement the number of friends and if it reaches zero for any event, we unrecommend that event.

What I have implemented so far is this: an offline/scheduled process that goes through each user who has friends that have at least one upcoming event in their calendar. For each such user, it constructs recommended events and number of interested friends. 

Your idea above should work most of the time, though. So we could have a combination of these two implementations. The offline process can run once a night after the friending piece has done its job. That way, anything that was missed due to the above flaw will get corrected within a day. And I can implement your idea in the form of code that runs immediately after a user adds or removes an event from their calendar. This piece will run in the background so that the user who added an event to his calendar won't have to sit through a slow response while the system goes and populates recommended events for all his friends.


> I know this process still won't make it possible to run recommended events
> for one-time logins. I also don't mind waiting until we have time to work on
> the friending function, but I do want to make sure we have a plan for making
> this feature work in a smart way down the line.

So what we already have is the Twitter-based friending function. We have it in the "Feature Complete" section of our spreadsheet.

The point I wanted to bring up is that I don't have support for one-time logins in the code built so far. In other words, all the data generated by the friending function and the recommendation function is being stored currently under RV user accounts. So if we can defer event recommendations for one-time logins to a separate task, that would be great.

-Rajesh
